version: 2.1

jobs:
  automatic-testing:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: "Install dependencies"
          command: |
            sudo apt-get update
            sudo apt-get install cmake
            sudo apt-get install autoconf
            sudo apt-get install autotools-dev
            sudo apt-get install libtool
            sudo apt-get install lcov
            sudo apt-get install cppcheck
            sudo apt-get install valgrind
      - run:
          name: "Run unit tests"
          command: |
            git submodule update --init --recursive
            mkdir out
            cd out
            cmake -DDESTDIR=${PWD}/out ../module1
            make DESTDIR=${PWD}/out
            make install DESTDIR=${PWD}/out
            export LD_LIBRARY_PATH=out/usr/local/lib/
            ulimit -c unlimited
            ./out/usr/local/bin/timeKeeper_test1
            ./out/usr/local/bin/smsDevice_test1
            ./out/usr/local/bin/smsSender_test1
            ./out/usr/local/bin/smsPlanner_test1
            ./out/usr/local/bin/timeKeeper_test2
            ./out/usr/local/bin/smsDevice_test2
            ./out/usr/local/bin/smsSender_test2
            ./out/usr/local/bin/smsPlanner_test2
          when: always
      - run:
          name: "Measure unit tests code coverage"
          command: |
            cd out
            lcov --rc lcov_branch_coverage=1 --capture --directory ${PWD} --output-file coverageUT.info
            genhtml --rc lcov_branch_coverage=1 coverageUT.info --output-directory outhtmlUT
          when: always
      - run:
          name: "Run integration tests"
          command: |
            cd out
            echo -e "add_definitions(-DIntegrationTests)\n$(cat ../module1/CMakeLists.txt)" > ../module1/CMakeLists.txt
            rm -rf CMakeFiles CMakeCache.txt
            cmake -DDESTDIR=${PWD}/out2 ../module1
            make install DESTDIR=${PWD}/out2
            export LD_LIBRARY_PATH=out2/usr/local/lib/
            ./out2/usr/local/bin/timeKeeper_test1
            ./out2/usr/local/bin/smsDevice_test1
            ./out2/usr/local/bin/smsSender_test1
            ./out2/usr/local/bin/smsPlanner_test1
            ./out2/usr/local/bin/timeKeeper_test2
            ./out2/usr/local/bin/smsDevice_test2
            ./out2/usr/local/bin/smsSender_test2
            ./out2/usr/local/bin/smsPlanner_test2
          when: always
      - run:
          name: "Measure integration tests code coverage"
          command: |
            cd out
            lcov --rc lcov_branch_coverage=1 --capture --directory ${PWD} --output-file coverageIT.info
            genhtml --rc lcov_branch_coverage=1 coverageIT.info --output-directory outhtmlIT
          when: always
      - run:
          name: "Static code analysis"
          command: |
            cd out
            mkdir staticAnalysis
            cppcheck -I ../module1/module1/public ../module1/module1/source/timeKeeper.cpp --xml
            cppcheck -I ../module1/module1/public ../module1/module1/source/timeKeeper.cpp --xml > staticAnalysis/timeKeeper.xml 2>&1
            cppcheck -I ../module1/module1/public ../module1/module1/source/smsDevice.cpp --xml
            cppcheck -I ../module1/module1/public ../module1/module1/source/smsDevice.cpp --xml > staticAnalysis/smsDevice.xml 2>&1
            cppcheck -I ../module1/module1/public ../module1/module1/source/smsSender.cpp --xml
            cppcheck -I ../module1/module1/public ../module1/module1/source/smsSender.cpp --xml > staticAnalysis/smsSender.xml 2>&1
            cppcheck -I ../module1/module1/public ../module1/module1/source/smsPlanner.cpp --xml
            cppcheck -I ../module1/module1/public ../module1/module1/source/smsPlanner.cpp --xml > staticAnalysis/smsPlanner.xml 2>&1
          when: always
      - run:
          name: "Dynamic code analysis"
          command: |
            cd out
            export LD_LIBRARY_PATH=out/usr/local/lib/
            mkdir dynamicAnalysis
            valgrind ./out/usr/local/bin/timeKeeper_test1
            valgrind ./out/usr/local/bin/timeKeeper_test1 > dynamicAnalysis/timeKeeper.txt 2>&1
            valgrind ./out/usr/local/bin/smsDevice_test1
            valgrind ./out/usr/local/bin/smsDevice_test1 > dynamicAnalysis/smsDevice.txt 2>&1
            valgrind ./out/usr/local/bin/smsSender_test1
            valgrind ./out/usr/local/bin/smsSender_test1 > dynamicAnalysis/smsSender.txt 2>&1
            valgrind ./out/usr/local/bin/smsPlanner_test1
            valgrind ./out/usr/local/bin/smsPlanner_test1 > dynamicAnalysis/smsPlanner.txt 2>&1
          when: always
      - run:
          name: "Collect output artifacts"
          command: |
            mkdir -p /tmp/output
            tar -zcvf archive.tar.gz out
            cp archive.tar.gz /tmp/output
          when: always
      - store_artifacts:
          path: /tmp/output

workflows:
  automatic-testing-workflow:
    jobs:
      - automatic-testing
